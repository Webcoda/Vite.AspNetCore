// Copyright (c) 2023 Quetzal Rivera.
// Licensed under the MIT License, See LICENCE in the project root for license information.

using System.Diagnostics.CodeAnalysis;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System.Text.Json;
using Vite.AspNetCore.Abstractions;

namespace Vite.AspNetCore.Services;

/// <summary>
/// This class is used to read the manifest.json file generated by Vite.
/// </summary>
public sealed class ViteManifest : IViteManifest
{
	private readonly ILogger<ViteManifest> _logger;
	private readonly IReadOnlyDictionary<string, ViteChunk> _chunks;

	private static bool _warnAboutManifestOnce = true;

	/// <summary>
	/// Initializes a new instance of the <see cref="ViteManifest"/> class.
	/// </summary>
	public ViteManifest(ILogger<ViteManifest> logger, IConfiguration configuration, IWebHostEnvironment environment)
	{
		this._logger = logger;

		// If the middleware is enabled, don't read the manifest.json file.
		if (ViteStatusService.IsMiddlewareRegistered)
		{
			if (_warnAboutManifestOnce)
			{
				logger.LogInformation("The manifest file won't be read because the middleware is enabled. The service will always return null chunks");
				_warnAboutManifestOnce = false;
			}

			this._chunks = new Dictionary<string, ViteChunk>();
			return;
		}

		// Read the Vite options from the configuration.
		var viteOptions = configuration.GetSection(ViteOptions.Vite).Get<ViteOptions>();

		// Read tha name of the manifest file from the configuration.
		var manifest = viteOptions.Manifest;

		// Read manifest directory
		var manifestDirectory = viteOptions.ManifestDirectory;

		// Get the manifest.json file path
		var manifestPath = Path.Combine(string.IsNullOrEmpty(manifestDirectory) ? environment.WebRootPath : manifestDirectory, manifest);

		// If the manifest.json file exists, deserialize it into a dictionary.
		if (File.Exists(manifestPath))
		{
			// Read the manifest.json file and deserialize it into a dictionary
			this._chunks = JsonSerializer.Deserialize<IReadOnlyDictionary<string, ViteChunk>>(File.ReadAllBytes(manifestPath), new JsonSerializerOptions()
			{
				PropertyNameCaseInsensitive = true
            })!;
		}
		else
		{
			if (_warnAboutManifestOnce)
			{
				logger.LogWarning(
					"The manifest file was not found. Did you forget to build the assets? ('npm run build')");
				_warnAboutManifestOnce = false;
			}

			// Create an empty dictionary.
			this._chunks = new Dictionary<string, ViteChunk>();
		}
	}

	/// <summary>
	/// Gets the Vite chunk for the specified entry point if it exists.
	/// If Dev Server is enabled, this will always return <see langword="null"/>.
	/// </summary>
	/// <param name="key"></param>
	/// <returns>The chunk if it exists, otherwise <see langword="null"/>.</returns>
	public IViteChunk? this[string key]
	{
		get
		{
			if (ViteStatusService.IsMiddlewareRegistered)
			{
				this._logger.LogWarning("Attempted to get a record from the manifest file while the Vite development server is activated. Null was returned");
				return null;
			}

			if (!this._chunks.TryGetValue(key, out var chunk))
			{
				this._logger.LogWarning("The chunk '{Key}' was not found", key);
				return chunk;
			}

			return chunk;
		}
	}
}
